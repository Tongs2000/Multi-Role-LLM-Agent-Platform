const express = require('express');
const multer = require('multer');
const sharp = require('sharp');
const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

// Initialize Express app
const app = express();
app.use(express.json());

// Multer configuration for file uploads
const upload = multer({ dest: 'uploads/' });

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/imageProcessor', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Image Schema
const ImageSchema = new mongoose.Schema({
  originalPath: String,
  editedPath: String,
  metadata: {
    width: Number,
    height: Number,
    format: String,
  },
});

const Image = mongoose.model('Image', ImageSchema);

// API Endpoints
app.post('/api/upload', upload.single('image'), async (req, res) => {
  try {
    const { file } = req;
    if (!file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    const metadata = await sharp(file.path).metadata();
    const image = new Image({
      originalPath: file.path,
      metadata: {
        width: metadata.width,
        height: metadata.height,
        format: metadata.format,
      },
    });

    await image.save();
    res.status(201).json({ id: image._id, metadata: image.metadata });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/process', async (req, res) => {
  try {
    const { id, operations } = req.body;
    const image = await Image.findById(id);
    if (!image) {
      return res.status(404).json({ error: 'Image not found' });
    }

    let processedImage = sharp(image.originalPath);

    // Apply operations
    if (operations.crop) {
      processedImage = processedImage.extract(operations.crop);
    }
    if (operations.rotate) {
      processedImage = processedImage.rotate(operations.rotate);
    }
    if (operations.filter) {
      switch (operations.filter) {
        case 'grayscale':
          processedImage = processedImage.grayscale();
          break;
        case 'sepia':
          processedImage = processedImage.sepia();
          break;
        case 'blur':
          processedImage = processedImage.blur(operations.blurValue || 5);
          break;
      }
    }

    const outputPath = `processed_${id}.${image.metadata.format}`;
    await processedImage.toFile(outputPath);
    image.editedPath = outputPath;
    await image.save();

    res.status(200).json({ editedPath: image.editedPath });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/save', async (req, res) => {
  try {
    const { id } = req.body;
    const image = await Image.findById(id);
    if (!image || !image.editedPath) {
      return res.status(404).json({ error: 'Edited image not found' });
    }

    // Move the edited image to a permanent location (e.g., AWS S3 in production)
    const finalPath = `saved_${id}.${image.metadata.format}`;
    fs.renameSync(image.editedPath, finalPath);
    image.editedPath = finalPath;
    await image.save();

    res.status(200).json({ savedPath: image.editedPath });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/images', async (req, res) => {
  try {
    const images = await Image.find();
    res.status(200).json(images);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});